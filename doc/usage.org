* Usage
*** Overriding the config file location / multiple config files (profiles)
    Just set the environment variable ~FW_CONFIG_PATH~. This is also honored by ~fw setup~ and ~fw org-import~ so you can create more than one config file this way and switch at will.
*** Migrating to ~fw~ / Configuration
   Initial setup is done with

  #+BEGIN_SRC bash
  fw setup DIR
  #+END_SRC

  This will look through ~DIR~ (flat structure!) and inspect all git repositories, then write ~.fw.json~ in your home.
  You can edit that file manually to add stuff. If you have repositories elsewhere you will need to add them manually and set the ~override_path~ property.
  The ~fw.json~ file is portable as long as you change the ~workspace~ attribute, so you can share the file with your colleagues (projects with ~override_path~ set won't be portable obviously.
  You can also add shell code to the ~after_clone~ and ~after_workon~ fields on a per-project basis.
  ~after_clone~ will be executed after cloning the project (interpreter is ~sh~) and ~after_workon~ will be executed each time you ~workon~ into the project.

  If you want to pull in all projects from a GitHub organization there's ~fw org-import <NAME>~ for that (note that you need a minimal config first).

*** Turn ~fw~ configuration into reality
  From now on you can

  #+BEGIN_SRC bash
  fw sync
  #+END_SRC

  which will clone all missing projects that are described by ~.fw.json~ but not present in your workspace.

*** Running command across all projects
  There is also
  #+BEGIN_SRC bash
  fw foreach 'git remote update --prune'
  #+END_SRC
  which will run the command in all your projects using ~sh~.

*** Updating ~fw~ configuration (adding new project)
  Instead of cloning new projects you want to work on, I suggest
  adding a new project to your ~.fw.json~. This can be done using the tool with

  #+BEGIN_SRC bash
  fw add git@github.com:brocode/fw.git
  #+END_SRC

  (you should run ~fw~ sync afterwards!)
  In case you don't like the computed project name (the above case would be ~fw~) you can override this (like with ~git clone~ semantics):

  #+BEGIN_SRC bash
  fw add git@github.com:brocode/fw.git my-fw-clone
  #+END_SRC

  If you're an emacs user you should always run
  #+BEGIN_SRC bash
  fw projectile
  #+END_SRC

  after a ~sync~. This will overwrite your projectile bookmarks so that all your ~fw~ managed projects are known.

*** What's possible?
    Some examples:

    - Override project clone path by setting a tag (note the priority of 100 (max) so that tag is applied last)
      #+BEGIN_SRC json
      "my-go-tag": {
        "after_clone": null,
        "after_workon": "make test",
        "priority": 100,
        "workspace": "~/go/src/github.com/mriehl/"
      },
      #+END_SRC
    - Override workspace globally
      #+BEGIN_SRC json
  "settings": {
    "workspace": "~/workspace",
  ...
  }
      #+END_SRC
    - Export env variables in ~after_workon~ or source new ones (it works because it's ~eval~'ed by your shell!)
      #+BEGIN_SRC json
      "python": {
        "after_workon": "source .venv/bin/activate"
      }
      #+END_SRC

** workon usage
  Just

  #+BEGIN_SRC bash
  workon
  #+END_SRC

  It will open a fuzzy finder which you can use to select a project.
  Press <enter> on a selection and it will drop you into the project folder and execute all the hooks.

  If you're in a pinch and just want to check something real quick, then you can use

  #+BEGIN_SRC
  nworkon
  #+END_SRC
  as that will no execute any post-workon hooks and simply drop you into the project folder.

  In case you're not using ~fzf~ integration (see above) you will need to pass an argument to ~workon~ / ~nworkon~ (the project name).
  It comes with simple prefix-based autocompletion.
