* Installation
   The best way to install fw is the rust tool cargo.
   #+BEGIN_SRC bash
   cargo install fw
   #+END_SRC

   If you are using OSX, [[https://rustup.rs/][rustup]] is recommended but you [[https://github.com/Homebrew/homebrew-core/pull/14490][should be able to use brew too]].

   If you're lucky enough to be an arch linux user: [[https://aur.archlinux.org/packages/fw/][AUR]]

   If you are running on Windows then you will have some issue compiling openssl. Please refer to compiling with rust-openssl [[https://github.com/sfackler/rust-openssl/blob/5948898e54882c0bedd12d87569eb4dbee5bbca7/README.md#windows-msvc][here]]

** With fzf
   Since we integrate with [[https://github.com/junegunn/fzf][fzf]] it is recommended to use that or [[https://github.com/lotabout/skim][skim]] for the best possible experience (~workon~ and ~nworkon~ will be helm-style fuzzy finders).
   Make sure ~fzf~ is installed and then add this to your shell configuration:

   Zsh (This shell is used by the project maintainers. The support for other shells is untested by us):
    #+BEGIN_SRC shell-script
    if [[ -x "$(command -v fw)" ]]; then
      if [[ -x "$(command -v fzf)" ]]; then
        eval $(fw print-zsh-setup -f 2>/dev/null);
      else
        eval $(fw print-zsh-setup 2>/dev/null);
      fi;
    fi;
    #+END_SRC

  Bash:
    #+BEGIN_SRC shell-script
    if [[ -x "$(command -v fw)" ]]; then
      if [[ -x "$(command -v fzf)" ]]; then
        eval "$(fw print-bash-setup -f 2>/dev/null)"
      else
        eval "$(fw print-bash-setup 2>/dev/null)"
      fi
    fi
    #+END_SRC

  Fish:
    #+BEGIN_SRC shell-script
    if test -x (command -v fw)
      if test -x (command -v fzf)
        fw print-fish-setup -f | source
      else
        fw print-fish-setup | source
      end
    end
    #+END_SRC

** With skim
  We also integrate with [[https://github.com/lotabout/skim][skim]], you can use that instead of fzf for the best possible experience (~workon~ and ~nworkon~ will be helm-style fuzzy finders).
  
  If you have cargo installed you can install skim like this:
  #+BEGIN_SRC shell-script
  cargo install skim
  #+END_SRC
  Make sure ~skim~ is installed and then add this to your shell configuration:
  
  Zsh (This shell is used by the project maintainers. The support for other shells is untested by us):
    #+BEGIN_SRC shell-script
    if [[ -x "$(command -v fw)" ]]; then
      if [[ -x "$(command -v sk)" ]]; then
        eval $(fw print-zsh-setup -s 2>/dev/null);
      else
        eval $(fw print-zsh-setup 2>/dev/null);
      fi;
    fi;
    #+END_SRC

  Bash:
    #+BEGIN_SRC shell-script
    if [[ -x "$(command -v fw)" ]]; then
      if [[ -x "$(command -v sk)" ]]; then
        eval "$(fw print-bash-setup -s 2>/dev/null)"
      else
        eval "$(fw print-bash-setup 2>/dev/null)"
      fi
    fi
    #+END_SRC

  Fish:
    #+BEGIN_SRC shell-script
    if test -x (command -v fw)
      if test -x (command -v sk)
        fw print-fish-setup -s | source
      else
        fw print-fish-setup | source
      end
    end
    #+END_SRC

** Without fzf or skim
   If you don't want ~fzf~ or ~skim~ integration:

  Zsh (This shell is used by the project maintainers. The support for other shells is untested by us):
    #+BEGIN_SRC shell-script
    if [[ -x "$(command -v fw)" ]]; then
      eval $(fw print-zsh-setup 2>/dev/null);
    fi;
    #+END_SRC

  Bash:
    #+BEGIN_SRC shell-script
    [[ -x "$(command -v fw)" ]] && eval "$(fw print-bash-setup)"
    #+END_SRC

  Fish:
    #+BEGIN_SRC shell-script
    test -x (command -v fw) && fw print-fish-setup | source
    #+END_SRC

   In this case, ~workon~ and ~nworkon~ will require an argument (the project) and will provide simple prefix-based autocompletion.
   You should really use the ~fzf~ or ~skim~ integration though, it's much better!
